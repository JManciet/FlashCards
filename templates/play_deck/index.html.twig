{% extends 'base.html.twig' %}

{% block title %}Hello PlayDeckController!{% endblock %}

{% block body %}
<h1>{{ deck.titre }}</h1>

 {{ dump(positionCartesByUtilisateur) }} 

 {% set cartesLevel0 = [] %}
 {% set cartesLevel1 = [] %}
 {% set cartesLevel2 = [] %}

{% for positionCarte in positionCartesByUtilisateur %}

    {% if positionCarte.position == 0 %}
        {% set cartesLevel0 = cartesLevel0|merge([positionCarte.carte]) %}
    {% elseif positionCarte.position == 1 %}
        {% set cartesLevel1 = cartesLevel1|merge([positionCarte.carte]) %}
    {% elseif positionCarte.position == 2 %}
        {% set cartesLevel2 = cartesLevel2|merge([positionCarte.carte]) %}
    {% endif %} 

{% endfor %} 

<div class="tabs">
    <div class="tab-buttons">
      <button class="tab-button grey active" data-tab="tab1">{{cartesDeckNotInPositionCartesByUtilisateur|length}}</button>
      <button class="tab-button red" data-tab="tab2">{{cartesLevel0|length}}</button>
      <button class="tab-button blue" data-tab="tab3">{{cartesLevel1|length}}</button>
      <button class="tab-button green" data-tab="tab4">{{cartesLevel2|length}}</button>
    </div>

    <div class="tab-contents">
      <div class="tab-content active" data-tab="tab1">

        {% if cartesDeckNotInPositionCartesByUtilisateur|length != 0 %}
            {% set randomCartesDeckNotInPositionCartesByUtilisateur = random(cartesDeckNotInPositionCartesByUtilisateur)%}
            {{ randomCartesDeckNotInPositionCartesByUtilisateur.question }}


        {% else %}
            Pas de cartes dans cet onglet !
        {% endif %} 

      </div>
      <div class="tab-content" data-tab="tab2">

        {% if cartesLevel0|length != 0 %}
            {% set randomCarteLevel0 = random(cartesLevel0)%}
            {{randomCarteLevel0.question }}
        {% else %}
            Pas de cartes dans cet onglet !
        {% endif %} 
    
      </div>
      <div class="tab-content" data-tab="tab3">

        {% if cartesLevel1|length != 0 %}
            {% set randomCarteLevel1 = random(cartesLevel1)%}
            {{randomCarteLevel1.question }}
        {% else %}
            Pas de cartes dans cet onglet !
        {% endif %} 

      </div>
      <div class="tab-content" data-tab="tab4">

        {% if cartesLevel2|length != 0 %}
            {% set randomCarteLevel2 = random(cartesLevel2)%}
            {{randomCarteLevel1.question }}
        {% else %}
            Pas de cartes dans cet onglet !
        {% endif %} 

      </div>
    </div>
  </div>


  <form action="{{ path('pdf', { 'id': deck.id}) }}" target="_blank" method="GET">

  

<br>

    <label for="rectX">Nombre de carte horizontal:</label>
	<input type="number" name="X" id="rectX" value="4"><br>

	<label for="rectY">Nombre de carte vertical:</label>
	<input type="number" name="Y" id="rectY" value="3"><br>

	<canvas id="myCanvas"></canvas>


    <p>Cliquez sur le bouton pour générer le PDF :</p>
    <button type="submit">Générer PDF</button>
    </form>

	<script>
		// Récupération des inputs
		var rectXInput = document.getElementById("rectX");
		var rectYInput = document.getElementById("rectY");

		// Récupération du canvas
		var canvas = document.getElementById("myCanvas");

		// Définition de la largeur et de la hauteur du canvas
		canvas.width = 210;
		canvas.height = 297;

		// Récupération du contexte de dessin en 2D
		var context = canvas.getContext("2d");

		// Fonction de dessin du rectangle
		function drawRect() {
			// Récupération des valeurs des inputs
			var rectX = parseInt(rectXInput.value);
			var rectY = parseInt(rectYInput.value);
			var rectWidth = canvas.width/rectX;
			var rectHeight = canvas.height/rectY;

			// Dessin du rectangle
			context.clearRect(0, 0, canvas.width, canvas.height); // Effacer le canvas
			context.fillStyle = "red";

            for (var i = 0; i < rectX; i++) {
                for (var y = 0; y < rectY; y++) {
			context.strokeRect(rectWidth*i, rectHeight*y, rectWidth, rectHeight);
                }
            }
		}

		// Dessin initial du rectangle
		drawRect();

		// Écoute des changements sur les inputs
		rectXInput.addEventListener("change", drawRect);
		rectYInput.addEventListener("change", drawRect);
	</script>

{% endblock %}
